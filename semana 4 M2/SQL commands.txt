CREATE TABLE Authors (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	Name VARCHAR(25) NOT NULL
);

CREATE TABLE Books (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	Name VARCHAR(25) NOT NULL,
	Authors_id INT REFERENCES Authors(id)
);

CREATE TABLE Customers (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	Name VARCHAR(25) NOT NULL,
	Email CHAR(40) NOT NULL
);

CREATE TABLE Rents (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	BooksID INT REFERENCES Books(id),
	CustomerID INT REFERENCES Customers(id),
	State VARCHAR(9) NOT NULL
);

****************************************************************************************
INSERT INTO Authors (Name)
	VALUES ('Miguel de Cervantes');
INSERT INTO Authors (Name)
	VALUES ('Dante Alighieri');
INSERT INTO Authors (Name)
	VALUES ('Takehiko Inoue');
INSERT INTO Authors (Name)
	VALUES ('Akira Toriyama');
INSERT INTO Authors (Name)
	VALUES ('Walt Disney');

**************************************************************************************
INSERT INTO Books (Name, Authors_id)
	VALUES ('Don Quijote',1);
INSERT INTO Books (Name, Authors_id)
	VALUES ('La Divina Comedia',2);
INSERT INTO Books (Name, Authors_id)
	VALUES ('Vagabond 1-3',3);
INSERT INTO Books (Name, Authors_id)
	VALUES ('Dragon Ball 1',4);
INSERT INTO Books (Name, Authors_id)
	VALUES ('The Book of the 5 Rings');
*************************************************************************************
INSERT INTO Customers (Name,Email)
	VALUES ('John Doe','j.doe@email.com');
INSERT INTO Customers (Name,Email)
	VALUES ('Jane Doe','jane@doe.com');
INSERT INTO Customers (Name,Email)
	VALUES ('Luke Skywalker','darth.son@email.com');
*************************************************************************************
INSERT INTO Rents (BooksID, CustomerID,State)
	VALUES (1,2,'Returned');
INSERT INTO Rents (BooksID, CustomerID,State)
	VALUES (2,2,'Returned');
INSERT INTO Rents (BooksID, CustomerID,State)
	VALUES (1,1,'On time');
INSERT INTO Rents (BooksID, CustomerID,State)
	VALUES (3,1,'On time');
INSERT INTO Rents (BooksID, CustomerID,State)
	VALUES (2,2,'Overdue');
*************************************************************************************
Obtenga todos los libros y sus autores:

SELECT Books.Name, Authors.Name
FROM Books AS books
LEFT JOIN Authors AS authors
ON books.Authors_id = authors.id

Obtenga todos los libros que no tienen autor:

SELECT Books.Name, Authors.Name
FROM Books AS books
LEFT JOIN Authors AS authors
ON books.Authors_id = authors.id WHERE Authors.Name ISNULL

Obtenga todos los autores que no tienen libros:

SELECT Books.Name, Authors.Name
FROM Authors AS authors
LEFT JOIN Books AS books
ON books.Authors_id = authors.id WHERE Books.Name ISNULL

Obtenga todos los libros que han sido rentados en algún momento:
SELECT Books.Name, Rents.CustomerID
FROM Books AS books  
INNER JOIN Rents AS rents 
ON rents.BooksID = Books.id 

Obtenga todos los libros que nunca han sido rentados:

SELECT Books.Name, Rents.CustomerID
FROM Books AS books  
LEFT JOIN Rents AS rents 
ON rents.BooksID = Books.id WHERE Rents.CustomerID ISNULL

Obtenga todos los clientes que nunca han rentado un libro:

SELECT Customers.Name, Rents.BooksID
FROM Customers AS customers 
LEFT JOIN Rents AS rents 
ON rents.CustomerID = Customers.id WHERE Rents.BooksID ISNULL

Obtenga todos los libros que han sido rentados y están en estado “Overdue”
SELECT Books.Name, Rents.State
FROM Books AS books  
LEFT JOIN Rents AS rents 
ON rents.BooksID = Books.id WHERE Rents.State IS "Overdue"